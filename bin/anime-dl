#!/usr/bin/env ruby
require "anime_dl"
require "optparse"

## App Options
options = { episode: true, file: nil, quiet: false }
help_statements = {
  all_episodes: %Q[Prevents the app from asking for an Episodes prompt. Fetches all episodes.],
  file_path: %Q[Provide location to store extracted details. Creates sub-directories as needed. (Usage Examples below).],
  quiet: %Q[Suppresses large, in-program help statements.],
  help: %Q[Shows this message and exits.],
  version: %Q[Prints version and exits.]
}

ARGV.options do |opts|
  opts.banner = "AnimeDL: An anime link scraper and downloader"
  opts.define_head "Usage:  #{File.basename($PROGRAM_NAME)} [options] file"
  opts.separator ""
  opts.separator "User can either download episodes or get links to video sources of episodes of a particular anime."
  opts.separator "On running the command the program prompts the user for a search query and prints a list of search results."
  opts.separator "On choosing a particular anime, the user can then choose to get links or download videos and choose which episodes to scrape."
  opts.separator ""
  opts.separator "Links: "
  opts.separator "  To output links to a file, provide the path to a file with '--file'."
  opts.separator "  If argument is a directory, a new text file will be created in that directory."
  opts.separator "  If '--file' is not provided, links are printed on the command line."
  opts.separator "  Note: If the arguement given with '--file' does not have a trailing `/` as in 'path/to/directory/' it will be assumed to be a file."
  opts.separator "        For the argument '/path/to/directory', links will be stored in the file called 'directory' located in '/path/to/'"
  opts.separator "Downloads: "
  opts.separator "  To download videos to particular directory, specify the directory with '--file'."
  opts.separator "  If no directory is specified the videos are downloaded to ./anime_name/"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-a", "--all", help_statements[:all_episodes]) do
    options[:all_episodes] = true
  end

  opts.on("-f file", "--file=file", help_statements[:file_path]) do |file|
    options[:file_path] = file
  end

  opts.on("-q", "--quiet", help_statements[:quiet]) do
    options[:quiet] = true
  end


  opts.on( "-v", "--version", help_statements[:version]) do
    puts "AnimeDL: Version 2.0.0"
    exit
  end

  opts.on( "-h", "--help", help_statements[:help]) do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Example Usage:"
  opts.separator "(If user chooses to scrape LINKS)"
  opts.separator %Q[  `$ anime-dl`                          (outputs link urls on the terminal)]
  opts.separator %Q[  `$ anime-dl -f path/to/filename.txt`  (outputs link urls to './path/to/filename.txt')]
  opts.separator %Q[  `$ anime-dl -f path/to/directory/`    (outputs link urls to './path/to/directory/anime_name.txt')]
  opts.separator "(If user chooses to DOWNLOAD videos)"
  opts.separator %Q[  `$ anime-dl`                          (downloads videos to './anime_name/')]
  opts.separator %Q[  `$ anime-dl -f .`                     (downloads videos to './')]
  opts.separator %Q[  `$ anime-dl -f /path/to/directory`    (downloads videos to '/path/to/directory/')]
  opts.separator ""

  opts.separator "Specifying Episodes:"
  opts.separator "(Run the app WITHOUT the '--quiet' option to allow it to provide explanations and examples for specifying episodes)"
  opts.separator ""
  opts.separator "NOTE: "
  opts.separator "The page being scraped from, \"animeheaven.eu\", only allows a certain number of page views per day (>170, <350)."
  opts.separator "Once that limit is exceeded, you will have to change networks or try again the next day."

  begin
    opts.parse!
  rescue => error
    puts "Error: #{error}"
    puts "Enter `anime-dl - h` for usage options"
    exit
  end
end

ARGV.clear


# New Instance
web_agent = AnimeDL::AnimeHeaven.new
user = AnimeDL::User.new(options)

# Utility exit method
def close_app
  puts "Exiting"
  exit
end

# Quiet Prompt
print user.prompts[:quiet]

## Search for anime and get user choice
user_choice = 0
while true
  search_query = user.get_search_query
  results = web_agent.search(search_query)
  user_choice = user.get_anime_choice(results.length)
  puts "\n"

  close_app  if (user_choice == "0")  # Choice to exit
  redo  if (user_choice.to_i == results.length + 1)  # Choice to Re-enter search query
  break  # Continue
end

## Anime choice
anime_choice = web_agent.set_current_anime_page(user_choice.to_i)
user.set_anime_choice(anime_choice)
puts "\nAnime: " + anime_choice + "\n"

## Scrape Option
user_scrape_option = user.get_scrape_option

## Episode Choices
episode_choices = []
unless (options[:all_episodes])  # TO BE REMOVED
  first_episode, last_episode = web_agent.getEpisodeNumberLimits
  episode_choices = user.get_episode_choices(first_episode, last_episode)
  close_app  if episode_choices == "-1"
  
  episode_choices = episode_choices.split(" ")
end
puts "\n"


## Directory and\or file creation and/or File setup
web_agent.run_pre_fetch_setup
user_setup_status = user.run_pre_fetch_setup
close_app  if (user_setup_status == -1)


## Data Retrieval
# Callback to call after an episode is fetched
callback = Proc.new { |episode| user.handle_episode(episode) }
web_agent.fetchVideoLinks(episode_choices, callback)

## Done fetching links.
web_agent.close

if (user_scrape_option == "d")
  ##
  # Remove idle message so that the app no longer says "Waiting for episodes...",
  #  after all episodes have been fetched
  ##
  user.set_idle_wait_message_option("")

  # Wait for downloads to complete
  sleep 10  while (user.download_state == "active")
end

# Post fetch code
user.run_post_fetch_cleanup

# Done
puts "Done\033[K"
close_app
